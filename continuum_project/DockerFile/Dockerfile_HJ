FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

# copy known source list(from cs.nctu)
# COPY sources-20.04.list /etc/apt/sources.list

# get pip
RUN apt update && apt upgrade -y
RUN apt install -y python3-pip git vim wget curl unzip sudo htop

# find best apt mirror(if no known source list)
# RUN pip install apt-select
# RUN apt-select -C TW && cp sources.list /etc/apt/sources.list
# RUN cat sources.list

# install pytorch
RUN pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu118

# install gstreamer
RUN apt install -y libgirepository1.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev \
    gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl \
    gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

# install environments packages
RUN apt install -y freeglut3 freeglut3-dev mosquitto mosquitto-clients \
    libxml2 libxml2-dev libusb-1.0-0-dev libzip-dev qtbase5-dev qtdeclarative5-dev libudev-dev \
    python3-sphinx libpulse-dev libturbojpeg libcap-dev

# fonts
RUN apt install -y fonts-noto-cjk

# install python packages
COPY requirements.txt .
RUN pip install -r requirements.txt

# install tiscamera(notice the version [baacb4cf])
RUN apt install -y build-essential lsb-release cmake pkg-config 
RUN pip install ninja markupsafe==2.0.1
RUN git clone https://github.com/TheImagingSource/tiscamera.git && \
    cd tiscamera && \
    git checkout baacb4cf && \
    ./scripts/dependency-manager install && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j16 && \
    make install

# camerasystem packages
RUN pip install PyTurboJPEG shapely scikit-spatial python-prctl

# build opencv
RUN apt install -y gfortran liblapack-dev liblapacke-dev libopenblas-dev libeigen3-dev libtbb2 libtbb-dev
RUN apt install -y libv4l-dev v4l-utils qv4l2 gpac x264 libx264-dev libgtk-3-dev python3-vtk7

ENV NVIDIA_DRIVER_CAPABILITIES=all
RUN apt install -y ffmpeg

# # build ffmpeg
# RUN apt install -y yasm libtool libc6 libc6-dev libnuma1 libnuma-dev
# RUN git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git && \
#     cd nv-codec-headers && \
#     make install
# RUN git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg/ && \
#     cd ffmpeg && \
#     ./configure --enable-nonfree --enable-cuda-nvcc --enable-libnpp --extra-cflags=-I/usr/local/cuda/include \
#                 --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-shared && \
#     make -j16 && \
#     make install



ARG version="4.2.0"

RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/${version}.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/${version}.zip && \
    unzip opencv.zip && \
    unzip opencv_contrib.zip

WORKDIR opencv-${version}/
RUN mkdir build
WORKDIR build/

# -DCUDA_nppicom_LIBRARY=stdc++ is duplicate in CUDA 11 but opencv 4.2 not fix yet
# CUDNN buggy
ENV python_exec='/usr/bin/python3'
RUN export include_dir=`${python_exec} -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())"` && \
    export library=`${python_exec} -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"` && \
    export site_packages=`${python_exec} -c 'import site; print(site.getsitepackages()[0])'` && \
    cmake -DWITH_CUDA=ON \
        #   -DWITH_CUDNN=ON \
          -DWITH_CUBLAS=1 \
          -DWITH_TBB=ON \
          -DWITH_GSTREAMER=ON \
          -DWITH_LIBV4L=ON \
          -DWITH_FFMPEG=ON \
          -DWITH_V4L=ON \
          -DWITH_QT=OFF \
          -DWITH_OPENGL=ON \
          -DWITH_OPENMP=ON \
          -DWITH_EIGEN=ON \
          -DWITH_JPEG=ON \   
          -DWITH_NVCUVID=ON \
          -DWITH_NVCUVENC=ON \ 
          -DENABLE_FAST_MATH=1 \
          -DCUDA_FAST_MATH=1 \
          -DCUDA_ARCH_BIN="8.6" \
          -DCUDA_ARCH_PTX="" \
          -DCUDA_nppicom_LIBRARY=stdc++ \ 
        #   -DCUDNN_LIBRARY=/lib/x86_64-linux-gnu/libcudnn.so \
        #   -DCUDNN_INCLUDE_DIR=/usr/include/ \
        #   -DCUDNN_VERSION=8.4.0 \
          -DOPENCV_DNN_CUDA=ON \
          -DOPENCV_GENERATE_PKGCONFIG=ON \
          -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${version}/modules/ \
          -DOPENCV_ENABLE_NONFREE=ON \
          -DBUILD_opencv_python2=ON \
          -DBUILD_opencv_python3=ON \
          -DBUILD_opencv_cudacodec=ON \
          -DBUILD_TESTS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_JPEG=ON \
          -DCMAKE_BUILD_TYPE=RELEASE \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DPYTHON3_EXECUTABLE=${python_exec} \
          -DPYTHON_DEFAULT_EXECUTABLE=${python_exec} \
          -DPYTHON3_INCLUDE_DIR=${include_dir} \
          -DPYTHON3_LIBRARY=${library} \
          -DPYTHON3_PACKAGES_PATH=${site_packages} ..

RUN make -j16 && make install

# timezone
RUN apt-get update && \
    apt-get install -yq tzdata

ENV TZ="Asia/Taipei"

RUN pip install vidgear[core]==0.2.6 pynvjpeg
RUN git clone https://github.com/keylase/nvidia-patch.git

RUN mkdir /storage
WORKDIR /storage
CMD ["/bin/bash"]
